-- =================================================================
-- Table Creation
-- =================================================================

1. Create the Authors table
 This table stores information about the book authors.
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Authors]') AND type in (N'U'))
BEGIN
    CREATE TABLE dbo.Authors (
        AuthorId INT IDENTITY(1,1) NOT NULL,
        FirstName NVARCHAR(100) NOT NULL,
        LastName NVARCHAR(100) NOT NULL,
        BirthDate DATE NULL,
        CONSTRAINT PK_Authors PRIMARY KEY CLUSTERED (AuthorId ASC)
    );
    PRINT 'Table ''Authors'' created successfully.';
END
GO

2. Create the Customers table
This table stores information about the library customers.
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Customers]') AND type in (N'U'))
BEGIN
    CREATE TABLE dbo.Customers (
        CustomerId INT IDENTITY(1,1) NOT NULL,
        FirstName NVARCHAR(100) NOT NULL,
        LastName NVARCHAR(100) NOT NULL,
        Email NVARCHAR(255) NOT NULL UNIQUE,
        PhoneNumber NVARCHAR(20) NULL,
        RegistrationDate DATETIME2 NOT NULL DEFAULT GETDATE(),
        CONSTRAINT PK_Customers PRIMARY KEY CLUSTERED (CustomerId ASC)
    );
    PRINT 'Table ''Customers'' created successfully.';
END
GO

3. Create the Books table
This table stores information about the books in the library.
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Books]') AND type in (N'U'))
BEGIN
    CREATE TABLE dbo.Books (
        BookId INT IDENTITY(1,1) NOT NULL,
        Title NVARCHAR(255) NOT NULL,
        ISBN NVARCHAR(20) NOT NULL UNIQUE,
        PublishedYear INT NULL,
        CopiesAvailable INT NOT NULL DEFAULT 1,
        CONSTRAINT PK_Books PRIMARY KEY CLUSTERED (BookId ASC)
    );
    PRINT 'Table ''Books'' created successfully.';
END
GO

4. Create the BookAuthorCrossReferences table (Many-to-Many relationship)
 This table links books to their respective authors.
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BookAuthorCrossReferences]') AND type in (N'U'))
BEGIN
    CREATE TABLE dbo.BookAuthorCrossReferences (
        BookId INT NOT NULL,
        AuthorId INT NOT NULL,
        CONSTRAINT PK_BookAuthorCrossReferences PRIMARY KEY CLUSTERED (BookId, AuthorId)
    );
    PRINT 'Table ''BookAuthorCrossReferences'' created successfully.';
END
GO

 5. Create the BorrowBooks table
 This table tracks which customer has borrowed which book.
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BorrowBooks]') AND type in (N'U'))
BEGIN
    CREATE TABLE dbo.BorrowBooks (
        BookId INT NOT NULL,
        CustomerId INT NOT NULL,
        BorrowDate DATETIME2 NOT NULL,
        DueDate DATETIME2 NOT NULL,
        ReturnDate DATETIME2 NULL, -- Null if the book has not been returned yet
        CONSTRAINT PK_BorrowBooks PRIMARY KEY CLUSTERED (BookId, CustomerId, BorrowDate)
    );
    PRINT 'Table ''BorrowBooks'' created successfully.';
END
GO


Add foreign key constraints to enforce data integrity between tables.

Add FK for BookAuthorCrossReferences -> Books
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_BookAuthorCrossReferences_Books]') AND parent_object_id = OBJECT_ID(N'[dbo].[BookAuthorCrossReferences]'))
BEGIN
    ALTER TABLE dbo.BookAuthorCrossReferences WITH CHECK ADD CONSTRAINT FK_BookAuthorCrossReferences_Books
    FOREIGN KEY(BookId) REFERENCES dbo.Books (BookId)
    ON DELETE CASCADE; -- If a book is deleted, remove its author references.

    ALTER TABLE dbo.BookAuthorCrossReferences CHECK CONSTRAINT FK_BookAuthorCrossReferences_Books;
    PRINT 'Foreign Key ''FK_BookAuthorCrossReferences_Books'' created successfully.';
END
GO

 Add FK for BookAuthorCrossReferences -> Authors
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_BookAuthorCrossReferences_Authors]') AND parent_object_id = OBJECT_ID(N'[dbo].[BookAuthorCrossReferences]'))
BEGIN
    ALTER TABLE dbo.BookAuthorCrossReferences WITH CHECK ADD CONSTRAINT FK_BookAuthorCrossReferences_Authors
    FOREIGN KEY(AuthorId) REFERENCES dbo.Authors (AuthorId)
    ON DELETE CASCADE; -- If an author is deleted, remove their book references.

    ALTER TABLE dbo.BookAuthorCrossReferences CHECK CONSTRAINT FK_BookAuthorCrossReferences_Authors;
    PRINT 'Foreign Key ''FK_BookAuthorCrossReferences_Authors'' created successfully.';
END
GO

 Add FK for BorrowBooks -> Books
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_BorrowBooks_Books]') AND parent_object_id = OBJECT_ID(N'[dbo].[BorrowBooks]'))
BEGIN
    ALTER TABLE dbo.BorrowBooks WITH CHECK ADD CONSTRAINT FK_BorrowBooks_Books
    FOREIGN KEY(BookId) REFERENCES dbo.Books (BookId)
    ON DELETE CASCADE;

    ALTER TABLE dbo.BorrowBooks CHECK CONSTRAINT FK_BorrowBooks_Books;
    PRINT 'Foreign Key ''FK_BorrowBooks_Books'' created successfully.';
END
GO

 Add FK for BorrowBooks -> Customers
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_BorrowBooks_Customers]') AND parent_object_id = OBJECT_ID(N'[dbo].[BorrowBooks]'))
BEGIN
    ALTER TABLE dbo.BorrowBooks WITH CHECK ADD CONSTRAINT FK_BorrowBooks_Customers
    FOREIGN KEY(CustomerId) REFERENCES dbo.Customers (CustomerId)
    ON DELETE CASCADE;

    ALTER TABLE dbo.BorrowBooks CHECK CONSTRAINT FK_BorrowBooks_Customers;
    PRINT 'Foreign Key ''FK_BorrowBooks_Customers'' created successfully.';
END
GO